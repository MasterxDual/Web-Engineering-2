html {
    /* Definimos el tamaño de la fuente por defecto para hacer responsive la letra (falta definir el tamaño particular de cada
    texto en unidades rem */
    font-size: 16px;
}

/* Eliminamos los espacios por defecto así está centrado mi header y demás elementos */
body {
    width: 100vw;
    height: 100vh;
    margin: 0;
    padding: 0;
    background-color: #FFFFFF;
}

/* Definimos el tamaño responsive de mi header para que mis 4 imagenes se ubiquen acordemente */
header {
    width: 100vw;
    height: 11.625vh;
    box-shadow: 0px 1px 5px #00000040;
    background-color: #FFFFFF;
}

/* Definimos las columnas y las filas para crear el area que ordenará mis cuatro imágenes.
Además, definimos el tamaño responsive del contenedor para que no se agrande automáticamente */
.header-container {
    display: grid;
    grid-template-columns: 50vw 50vw;
    grid-template-rows: 5.8125vh 5.8125vh;
    grid-template-areas: 
    "a b"
    "c d";
    width: 100vw;
    height: 11.625vh;
}

.time-container {
    /* Definimos la ubicación de la imagen de tiempo y su contenedor */
    grid-area: a;
    /* Definimos los márgenes externos de la imagen para que se mueva un poco a la derecha y abajo */
    margin-top: calc((17.44 / 800) * 100vh);
    margin-left: calc((24 / 360) * 100vw);
}

.arrow-container {
    /* Definimos la ubicación de la imagen de flecha y su contenedor */
    grid-area: c;
    /* Definimos los márgenes externos de la imagen para que se mueva un poco a la derecha y abajo */
    margin-left: calc((13 / 360) * 100vw);
    margin-top: calc((13.284 / 800) * 100vh);
}

.right-icons-container {
    /* Movemos el icono al lado de la borde derecho de la ventana */
    display: flex;
    justify-content: flex-end;
    /* Definimos la ubicación de la imagen de iconos de celular y su contenedor */
    grid-area: b;
    /* Definimos los márgenes externos de la imagen para que se mueva un poco a la izquierda y abajo */
    margin-top: calc((20.58 / 800) * 100vh);
    margin-right: calc((24 / 360) * 100vw);
}

/* Para que la imagen no se agrande cuando use flex en su contenedor padre */
#right-icons {
    width: calc((40.19 / 360) * 100vw);
    height: calc((14.85 / 800) * 100vh);
}

.wibond-container {
    /* Movemos el icono al lado de la borde derecho de la ventana */
    display: flex;
    justify-content: flex-end;
    /* Definimos la ubicación de la imagen de iconos de wibond y su contenedor */
    grid-area: d;
    /* Definimos los márgenes externos de la imagen para que se mueva un poco a la izquierda y abajo */
    margin-top: calc((16.28 / 800) * 100vh);
    margin-right: calc((16 / 360) * 100vw);
}

/* Para que la imagen no se agrande cuando use flex en su contenedor padre */
#wibond {
    width: calc((113 / 360) * 100vw);
    height: calc((18 / 800) * 100vh);
}

/* Hasta acá tenemos el header con sus 4 iconos. Cuidado ya que esto hay que replicarlo en casi todas las demás maquetas. */

.transfer-heading {
    width: calc((171 / 360) * 100vw);
    height: calc((24 / 800) * 100vh);
    font-family: "Lato", sans-serif;
    font-weight: 600;
    font-size: 1.25rem; /* (1 rem = 16px --> (20px * 1rem / 16px)) */
    /* Definimos los márgenes externos de la imagen para que se mueva un poco a la derecha y abajo */
    margin-top: calc((26 / 800) * 100vh);
    margin-left: calc(21 / 360 * 100vw);
}

/* Definimos flex en el contenedor padre section para que flex funcione en sus contenedores hijos */
.section-container{
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

/* Definimos flex para centrar dos columnas que se ubiquen al centro */
.actual-money {
    width: calc((311 / 360) * 100vw);
    height: calc((96 / 800) * 100vh);
    background-color: #5252FF;
    /* Movemos el contenedor con la descripcion del dinero hacia el centro con flex */
    align-self: center;
    position: relative;
    border-radius: 10px;
}

/* Definimos el estilo de la letra responsive */
.actual-money p {
    width: calc((173 / 360) * 100vw);
    height: calc((30 / 800) * 100vh);
    font-family: "Lato", sans-serif;
    font-weight: 700;
    font-size: 1.5625rem; /* (1 rem = 16px --> (25px * 1rem / 16px)) */
    color: #FFFFFF;
    position: absolute;
    top: calc((47 / 96) * 100%);
    left: calc((17 / 311) * 100%);
    margin: 0;
}

/* Definimos el estilo de la letra responsive */
.actual-money h2 {
    width: calc((95 / 360) * 100vw);
    height: calc((14 / 800) * 100vh);
    font-family: "Lato", sans-serif;
    font-weight: 700;
    font-size: 0.75rem; /* (1 rem = 16px --> (12px * 1rem / 16px)) */
    color: #FFFFFF;
    /* Movemos el texto 'Dinero disponible' hacia su lugar correspondiente */
    position: absolute;
    top: calc((17 / 96) * 100%);
    left: calc((17 / 311) * 100%);
    /* Le quitamos los márgenes por defecto ya que me cambian la ubicación actual */
    margin: 0;
}

.ellipse1 {
    /* El ancho y el alto deben ser iguales para que sea un círculo, ATENTOS, por eso usamos las mismas unidades */
    width: calc((188.75 / 360) * 100vw);
    height: calc((188.75 / 360) * 100vw);
    background-color: #FFFFFF1A;
    border-radius: 50%;
    /* Movemos el elemento tomando como referencia al elemento padre .actual-money. Los valores de top y left están indicados
    exactamente en el figma. Necesitamos que haya un elemento padre que sea la referencia con position: relative */
    position: absolute;
    left: calc((-41.95 / 360) * 100vw);
    top: calc((-71.3 / 800) * 100vh);
}

.ellipse2 {
    /* El ancho y el alto deben ser iguales para que sea un círculo, ATENTOS, por eso usamos las mismas unidades */
    width: calc((230.7 / 360) * 100vw);
    height: calc((230.7 / 360) * 100vw);
    background-color: #FFFFFF1A;
    border-radius: 50%;
    /* Movemos el elemento tomando como referencia al elemento padre .actual-money. Los valores de top y left están indicados
    exactamente en el figma. Necesitamos que haya un elemento padre que sea la referencia con position: relative */
    position: absolute;
    left: calc((-69.68 / 360) * 100vw);
    top: calc((-113.24 / 800) * 100vh);
}

.addressee-container {
    width: calc((315 / 360) * 100vw);
    height: calc((152 / 800) * 100vh);
    /* Movemos el contenedor con la descripcion del dinero hacia el centro con flex */
    align-self: center;
    /* Definimos esta referencia para poder mover el contenedor recipients-container */
    position: relative;
}

.destiny-container {
    width: calc((315 / 360) * 100vw);
    height: calc((41 /  800) * 100vh);
    background-color: #1F1F1F;
    /* Redondeamos solo las esquinas de arriba del rectangulo */
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    /* Definimos el contenedor padre del texto 'Tipo de destino' como referencia para mover 
    con absolute al texto mencionado anteriormente */
    position: relative;
    top: calc((16 / 800) * 100vh);
}

.destiny-container h2 {
    font-family: "Lato", sans-serif;
    font-weight: 700;
    font-size: 0.75rem; /* (1 rem = 16px --> (12px * 1rem / 16px)) */
    color: #FFFFFF;
    /* Movemos el texto 'Tipo de destino' hacia la derecha */
    position: absolute;
    left: calc((17 / 315) * 100%);
    top: calc((4 / 46.31) * 100%);
}

.recipients-container {
    /* Definimos el tamaño del rectangulo que encierra a los tipos de destino (único o múltiple) */
    width: calc((315 / 360) * 100vw);
    height: calc((130 / 800) * 100vh);
    /* Permitimos que el contenedor de 'Destinatario único' y el de 'Múltiples destinatarios' 
    estén en forma de columna uno abajo del otro, y de paso permitimos que éstos contenedores
    hijos puedan utilizar propiedades de flex */
    display: flex;
    flex-direction: column;
    /* Movemos el contenedor un poco hacia abajo para ubicarlo correctamente */
    position: absolute;
    top: calc((57 / 152) * 100%);
    /* Definimos el sombreado externo */
    box-shadow: 0px 0px 5px #00000040;
}

/* Centramos el texto 'Destinatario único' y el botón, y de paso se mueven un poco hacia afuera */
.sole-recipient-container {
    display: flex;
    justify-content: space-around;
    position: relative;
    top: calc((5 / 118.63) * 100%);
}

/* Convertimos el texto 'Destinatario único' en un bloque que ocupa sólo el espacio en su contenido.
 Deja de ser un display:block para que el botón pueda estar al lado de éste texto.*/
.sole-recipient-container p {
    display: inline-block;
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 0.875rem; /* (1 rem = 16px --> (14px * 1rem / 16px)) */
    margin-left: calc((-42 / 360) * 100vw);
}

.button {
    /* Definimos el estilo del botón externo */
    width: 20px;
    height: 20px;
    border-radius: 50%;
    /* Definimos el circulo sin relleno */
    border: 2px solid #507CDD; /* Borde inicial */
    cursor: pointer;
    background-color: transparent;
    transition: all 0.5s ease; /* Añadimos transición para width y height */
    position: relative; /* Necesario para posicionar el pseudo-elemento ::after */
    right: calc((-40 / 360) * 100vw);
    top: calc((15 / 800) * 100vh);
}

/* Movemos un poco el botón de Múltiples destinatarios ya que no está ubicado en el mismo lugar que el botón de Destinatario único */
#btn2 {
    position: relative;
    right: calc((-32 / 360) * 100vw);
}

/* Definimos el pseudo-elemento antes de activarlo */
/* ::after es un pseudo-elemento que, por sí solo, no tiene un "contenido" visible 
a menos que se le indique con content. Sin esto, el círculo interno no aparecería. */
.button::after {
    /* " " (una cadena vacía) significa que no se mostrará texto o contenido, pero se sigue creando
    el elemento ::after, el cual es utilizado para el diseño del círculo interno. */
    content: "";
    width: 10px;
    height: 10px;
    background-color: #507CDD;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* Centra el círculo interno dentro del botón */
    opacity: 0; /* Inicialmente invisible */
    transition: opacity 0.5s ease; /* Transición suave para la opacidad */
}

/* Cuando el botón está activo, hacemos visible el círculo interno */
.button.active::after {
    opacity: 1;
}

/* Centramos el texto 'Múltiples destinatarios' y el botón, y de paso se mueven un poco hacia afuera */
.multiple-recipients-container {
    display: flex;
    justify-content: space-around;
}

/* Convertimos el texto 'Múltiples destinatarios' en un bloque que ocupa sólo el espacio en su contenido
 Deja de ser un display:block para que el botón pueda estar al lado de éste texto. */
.multiple-recipients-container p {
    display: inline-block;
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 0.875rem; /* (1 rem = 16px --> (14px * 1rem / 16px)) */
    margin-left: calc((-32 / 360) * 100vw);
}

/* Definimos la linea que separa ambas opciones de destinatario */
.line-break {
    width: calc((293 / 360) * 100vw);
    background-color: #00000033;
    color: #00000033;
    position: relative;
    top: calc((5 / 118.63) * 100%);
}

.button-container {
    position: relative;
}

.submit-btn {
    /* Diseño y tamaño */
    width: calc((285 / 360) * 100vw);
    height: calc((51.35 / 800) * 100vh);
    border-radius: 8.56px;
    background: #311B92;
    border: 0;
    /* Ubicamos el botón en su lugar correspondiente */
    position: absolute;
    top: calc((240 / 800) * 100vh);
    left: calc((38 / 360) * 100vw);
    /* Diseño a la letra 'Siguiente' */
    font-family: "Lato", sans-serif;
    font-weight: 700;
    font-size: 0.9093rem; /* (1 rem = 16px --> (14.55px * 1rem / 16px)) */
    color: #FFFFFF;
}

/* Definimos el estilo que queremos que tenga el submit-btn si fue seleccionado al menos un botón circular de los de arriba */
.submit-btn.selected {
    width: calc((300 / 360) * 100vw);
    height: calc((55 / 800) * 100vh);
    background: #7e63b7;
    left: calc((32 / 360) * 100vw);
    cursor: pointer;
}

/* --------------------------------------------------------------------------------------- */
/* A partir de aquí tenemos el estilo de la segunda página de transferencia transfer2.html */

ol.stepper {
    /* Definimos las variables que luego usaremos con var(nombre-variable) */
    --default-b: #D7D8DA; /* Color gris del stepper */
    --default-c: #507CDD; /* Color azul del stepper */
    --b: 5px; /* Grosor de la linea */
    /* Esta configuracion nos permite tener cuantos steps nosotros querramos sin tener que ajustar la posicion de cada uno.
    space-between va a hacer el trabajo por nosotros */
    display: flex;
    list-style: none; /* Quitamos los estilos por defecto que tienen las listas */
    justify-content: space-between; /* Espaciamos los circulos */
    align-self: center; /* Centramos el stepper horizontalmente */
    margin-bottom: calc((30 / 800) * 100vh);
    padding: 0; /* Quitamos los espacios internos por defecto */
    margin-top: calc(7 / 800 * 100vh);
}

.step {
    /* Creamos los circulos */
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background-color: var(--default-b); /* Color gris del stepper */
    background-repeat: no-repeat; /* Para que no se repita las imágenes que exportaremos */
    background-position: center; /* Centramos la imagen dentro del círculo */
    background-size: 16px 16px; /* Tamaño fijo de la imagen */
    background-image: url(../img/Stepper/more-horizontal.png);
}

.step1 {
    background-color: var(--default-c);
    /* La ruta es RELATIVA CON RESPECTO A DONDE ESTÁ EL ARCHIVO CSS transfer.css, por eso subimos vamos un directorio 'hacia atrás'.
    Pisamos el valor anterior de la imagen que habíamos insertado en todos los steps (en .step)*/
    background-image: url(../img/Stepper/edit.png);
}